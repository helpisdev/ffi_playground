// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `packages/include/bridge.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen_waku_dart_bridge.yaml`.
///
class WakuDartBridge {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WakuDartBridge(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WakuDartBridge.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int init(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _init(
      data,
    );
  }

  late final _initPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init');
  late final _init = _initPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void invoke(
    ffi.Pointer<ffi.Char> msg,
    int msgSize,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _invoke(
      msg,
      msgSize,
      id,
    );
  }

  late final _invokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('invoke');
  late final _invoke = _invokePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void register_callback(
    Object callback,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _register_callback(
      callback,
      id,
    );
  }

  late final _register_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Handle, ffi.Pointer<ffi.Char>)>>('register_callback');
  late final _register_callback = _register_callbackPtr
      .asFunction<void Function(Object, ffi.Pointer<ffi.Char>)>();

  void register_invoker(
    ffi.Pointer<CallbackInvoker> invoker,
  ) {
    return _register_invoker(
      invoker,
    );
  }

  late final _register_invokerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CallbackInvoker>)>>(
      'register_invoker');
  late final _register_invoker = _register_invokerPtr
      .asFunction<void Function(ffi.Pointer<CallbackInvoker>)>();

  void release() {
    return _release();
  }

  late final _releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('release');
  late final _release = _releasePtr.asFunction<void Function()>();
}

typedef CallbackInvoker = ffi.NativeFunction<
    ffi.Void Function(ffi.Handle callbackHandle, ffi.Pointer<ffi.Char> msg,
        ffi.Size msgSize)>;
